'use strict';

var Home = React.createClass({ displayName: "Home",

  getInitialState: function getInitialState() {
    return {
      location: false
    };
  },

  render: function render() {
    var location = this.props.location;

    var source = '/api/uber/products/' + location.coords.latitude + '/' + location.coords.longitude;

    return React.createElement("div", { className: "page home" }, React.createElement(FetchIt, { source: source, type: "post" }, React.createElement(ProductList, null)));
  }
});
var Product = React.createClass({ displayName: "Product",
  render: function render() {
    var product = this.props.product;

    console.log(product);
    return React.createElement("li", null, product.display_name);
  }
});
var ProductList = React.createClass({ displayName: "ProductList",
  render: function render() {
    console.log(this.props.data);
    var products = this.props.data.products;

    return React.createElement("div", { className: "component product-list" }, React.createElement("ul", null, products.map(function (product, i) {
      return React.createElement(Product, { product: product });
    })));
  }
});
var Loader = React.createClass({ displayName: "Loader",

  componentWillMount: function componentWillMount() {
    console.log(this.state);
  },

  render: function render() {
    var type = this.props.type;

    var loadingMessage = this._getMessage(type);

    return React.createElement("div", { className: "component loader" }, loadingMessage);
  },

  _getMessage: function _getMessage(type) {
    switch (type) {
      case 'location_loading':
        return 'Sup Bro? I\'m finding your location.';
        break;
    }
  }

});
var FetchIt = React.createClass({ displayName: "FetchIt",

  propTypes: {
    source: React.PropTypes.string.isRequired,
    data: React.PropTypes.object
  },

  componentDidMount: function componentDidMount() {
    var _props = this.props;
    var source = _props.source;
    var data = _props.data;
    var type = _props.type;

    if (type === 'post') {
      $.post(source, function (response) {
        this._passToChildren(response);
      }.bind(this));
    }
  },

  getInitialState: function getInitialState() {
    return {
      loaded_children: false
    };
  },

  render: function render() {
    return React.createElement("div", null, this.state.loaded_children);
  },

  _passToChildren: function _passToChildren(response) {
    var childrenWithProps = React.Children.map(this.props.children, function (child) {
      return React.cloneElement(child, { data: response });
    });

    this.setState({ 'loaded_children': childrenWithProps });
  }

});
var Main = React.createClass({ displayName: "Main",

  getInitialState: function getInitialState() {
    return {
      location: false
    };
  },

  componentWillMount: function componentWillMount() {
    this._getLocation();
  },

  render: function render() {
    var MasterModule = '';

    if (this.state.location) MasterModule = React.createElement(Home, { location: this.state.location });else MasterModule = React.createElement(Loader, { type: "location_loading" });

    return React.createElement("div", { className: "wrapper main" }, MasterModule);
  },

  _getLocation: function _getLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        this.setState({ location: position });
      }.bind(this));
    } else {
      x.innerHTML = "Geolocation is not supported by this browser.";
    }
  }
});
React.render(React.createElement(Main, null), document.getElementById('app'));